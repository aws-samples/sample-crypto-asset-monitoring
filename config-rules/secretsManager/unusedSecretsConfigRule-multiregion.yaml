AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS Config Rule to detect unused secrets in AWS Secrets Manager (Multi-Region Compatible)'

Parameters:
  PrimaryRegion:
    Type: String
    Default: us-east-1
    Description: The primary region where IAM resources will be created
  RoleName:
    Type: String
    Default: check-unused-secrets-role
    Description: Name of the IAM role to be created (in primary region only)

Conditions:
  IsPrimaryRegion: 
    Fn::Equals: 
      - Ref: 'AWS::Region'
      - Ref: PrimaryRegion

Resources:
  # IAM Role - Only created in the primary region
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Condition: IsPrimaryRegion
    Properties:
      RoleName: 
        Ref: RoleName
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: allow-secrets-and-config-permissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:DescribeSecret
                  - secretsmanager:ListSecrets
                  - config:PutEvaluations
                Resource: "*"

  # Lambda Function - Created in all regions
  CheckUnusedSecretsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: check-unused-secrets
      Runtime: python3.12
      Role: 
        Fn::If: 
          - IsPrimaryRegion
          - Fn::GetAtt: [LambdaExecutionRole, Arn]
          - Fn::Sub: 'arn:aws:iam::${AWS::AccountId}:role/${RoleName}'
      Handler: index.lambda_handler
      Code:
        ZipFile: |
          import boto3
          import datetime
          import json

          def lambda_handler(event, context):
              # Initialize clients
              secrets_client = boto3.client('secretsmanager')
              config_client = boto3.client('config')
              
              try:
                  # Determine if this is a scheduled evaluation or change-triggered
                  if 'invokingEvent' in event:
                      invokingEvent = json.loads(event['invokingEvent'])
                      
                      # Check if this is a scheduled evaluation
                      if 'messageType' in invokingEvent and invokingEvent['messageType'] == 'ScheduledNotification':
                          return evaluate_all_secrets(event, context, secrets_client, config_client)
                      
                      # Check if this is a configuration change
                      elif 'configurationItem' in invokingEvent:
                          secret_arn = invokingEvent['configurationItem']['ARN']
                          return evaluate_single_secret(event, context, secret_arn, secrets_client, config_client)
                  
                  # Fallback to evaluating all secrets
                  return evaluate_all_secrets(event, context, secrets_client, config_client)
                  
              except Exception as e:
                  print(f"Error in lambda_handler: {str(e)}")
                  # Return empty evaluations to avoid failure
                  return {"evaluations": []}
          
          def evaluate_all_secrets(event, context, secrets_client, config_client):
              print("Evaluating all secrets (scheduled evaluation)")
              evaluations = []
              
              # Get all secrets
              try:
                  paginator = secrets_client.get_paginator('list_secrets')
                  for page in paginator.paginate():
                      for secret in page.get('SecretList', []):
                          secret_arn = secret['ARN']
                          evaluation = check_secret_compliance(secret, secrets_client)
                          evaluations.append(evaluation)
                          
                  # Put evaluations to AWS Config
                  if evaluations:
                      config_client.put_evaluations(
                          Evaluations=evaluations,
                          ResultToken=event.get('resultToken', '')
                      )
                  
                  return {"evaluations": evaluations}
                  
              except Exception as e:
                  print(f"Error evaluating all secrets: {str(e)}")
                  return {"evaluations": []}
          
          def evaluate_single_secret(event, context, secret_arn, secrets_client, config_client):
              print(f"Evaluating single secret: {secret_arn}")
              try:
                  # Get secret details
                  resp = secrets_client.describe_secret(SecretId=secret_arn)
                  evaluation = check_secret_compliance(resp, secrets_client)
                  
                  # Put evaluation to AWS Config
                  if 'resultToken' in event:
                      config_client.put_evaluations(
                          Evaluations=[evaluation],
                          ResultToken=event['resultToken']
                      )
                  
                  return {"evaluations": [evaluation]}
                  
              except Exception as e:
                  print(f"Error evaluating secret {secret_arn}: {str(e)}")
                  return {"evaluations": []}
          
          def check_secret_compliance(secret, secrets_client):
              secret_arn = secret['ARN']
              creation_date = secret.get('CreatedDate')
              last_accessed = secret.get('LastAccessedDate')
              now = datetime.datetime.now(datetime.timezone.utc)
              
              # Prepare annotation details
              annotation = []
              
              if creation_date:
                  annotation.append(f"Created on {creation_date.strftime('%Y-%m-%d %H:%M:%S')} UTC")
              else:
                  annotation.append("Creation date not available.")
              
              if last_accessed:
                  age = (now - last_accessed).days
                  annotation.append(f"Last accessed {age} days ago.")
                  compliance_type = 'NON_COMPLIANT' if age > 90 else 'COMPLIANT'
              else:
                  annotation.append("Never accessed.")
                  compliance_type = 'NON_COMPLIANT'
              
              return {
                  'ComplianceResourceType': 'AWS::SecretsManager::Secret',
                  'ComplianceResourceId': secret_arn.split(':secret:')[-1],
                  'ComplianceType': compliance_type,
                  'Annotation': ' | '.join(annotation)[:256],  # Limit for AWS Config annotation
                  'OrderingTimestamp': now
              }

  # Lambda Permission - Created in all regions
  ConfigInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: 
        Ref: CheckUnusedSecretsFunction
      Action: lambda:InvokeFunction
      Principal: config.amazonaws.com
      SourceAccount: 
        Ref: 'AWS::AccountId'

  # Config Rule - Created in all regions
  UnusedSecretsRule:
    Type: AWS::Config::ConfigRule
    DependsOn: ConfigInvocationPermission
    Properties:
      ConfigRuleName: a-unused-secrets-check
      Description: Detect secrets not accessed in the last 90 days
      Source:
        Owner: CUSTOM_LAMBDA
        SourceIdentifier: 
          Fn::GetAtt: [CheckUnusedSecretsFunction, Arn]
        SourceDetails:
          - EventSource: aws.config
            MessageType: ConfigurationItemChangeNotification
          - EventSource: aws.config
            MessageType: ScheduledNotification
            MaximumExecutionFrequency: TwentyFour_Hours
      Scope:
        ComplianceResourceTypes:
          - AWS::SecretsManager::Secret

Outputs:
  ConfigRuleName:
    Description: The name of the AWS Config Rule
    Value: 
      Ref: UnusedSecretsRule
  LambdaFunctionArn:
    Description: The ARN of the Lambda function
    Value: 
      Fn::GetAtt: [CheckUnusedSecretsFunction, Arn]
  IAMRoleArn:
    Description: The ARN of the IAM role (only created in primary region)
    Value: 
      Fn::If: 
        - IsPrimaryRegion
        - Fn::GetAtt: [LambdaExecutionRole, Arn]
        - Fn::Sub: 'arn:aws:iam::${AWS::AccountId}:role/${RoleName}'
